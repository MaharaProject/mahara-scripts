#!/usr/bin/python
#
# Gerrit Launchpad and CIA Hook, inspired by:
#   https://github.com/hobbs/jirret
#   http://cia.vc/clients/git/ciabot.bash
#   http://cia.vc/clients/bzr/cia_bzr.py
#
# Copyright (C) 2011 - 2013 Catalyst IT (http://www.catalyst.net.nz)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from email.mime.text import MIMEText
import argparse
import re
import smtplib
import subprocess
import sys
from xml.dom.minidom import Document
import xmlrpclib

FROM_ADDRESS = 'dev@mahara.org'
TO_ADDRESS_SUFFIX = '@bugs.launchpad.net'
BASE_DIR = '/home/gerrit/mahara_reviews'

def send_notifications(change_url, project, branch, uploader, commit):
    # Extract git log of all merged commits
    git_log = subprocess.Popen(['git', '--git-dir=' + BASE_DIR + '/git/' + project + '.git', 'log', '--no-merges', commit + '^1..' + commit], stdout=subprocess.PIPE).communicate()[0]

    # In launchpad's email api, leading whitespace followed by a keyword is how you send a command in your email.
    # So, we need to remove the leading spaces from every line
    unindent = re.compile('^[ ]+', re.MULTILINE);
    git_log = re.sub(unindent, '', git_log);

    # Find bug numbers referenced in the git log
    bug_regexp = '[Bb]ug:? *#?([0-9]+)'
    tokens = re.split(bug_regexp, git_log)

    # Extract unique bug numbers
    bugs = []
    for token in tokens:
        if re.match('^\d+$', token) and (token not in bugs):
            bugs.append(token)
            send_bug_mail(token, change_url, project, commit, uploader, branch, git_log)

def send_bug_mail(bug_number, change_url, project, commit, uploader, branch, git_log):

    to_address = bug_number + TO_ADDRESS_SUFFIX

    gitorious_url = 'http://gitorious.org/mahara/%s/commit/%s' % (project, commit)
    body = 'Patch for "%s" branch: %s\n' % (branch, change_url)

    msg = MIMEText(body)
    msg['Subject'] = 'A patch has been submitted for review'
    msg['From'] = FROM_ADDRESS
    msg['To'] = to_address

    s = smtplib.SMTP()
    s.connect()
    s.sendmail(FROM_ADDRESS, [to_address], msg.as_string())
    s.quit()

def main():
    # See https://git.eclipse.org/r/Documentation/config-hooks.html#_patchset_created
    parser = argparse.ArgumentParser()
    parser.add_argument('--change_url', required=True)
    parser.add_argument('--project', required=True)
    parser.add_argument('--branch', required=True)
    parser.add_argument('--uploader', required=True)
    parser.add_argument('--commit', required=True)
    parser.add_argument('--is-draft', required=True)
    parser.add_argument('--patchset', required=True)
    args = parser.parse_known_args()

    # Comment on Launchpad only on first patchset for each change, and no notification for drafts.
    if args.is_draft != 'true' and args.patchset == '1':
        send_notifications(args.change_url, args.project, args.branch, args.uploader, args.commit)

    return 0;

if __name__ == '__main__':
    sys.exit(main())
